package us.myles.sep;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.bukkit.Bukkit;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockState;
import org.bukkit.block.Skull;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Item;
import org.bukkit.inventory.ItemStack;
import org.bukkit.plugin.java.JavaPlugin;

import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.wrappers.nbt.NbtBase;
import com.comphenix.protocol.wrappers.nbt.NbtCompound;
import com.comphenix.protocol.wrappers.nbt.NbtFactory;
import com.comphenix.protocol.wrappers.nbt.NbtList;
import com.google.common.io.BaseEncoding;

public class SkullExploitPatch extends JavaPlugin {
    Boolean mc10;
    public void onEnable() {
        mc10 = this.getServer().getClass().getPackage().getName().replace(".",  ",").split(",")[3].startsWith("v1_10_R");
        // Packet Listener
        ProtocolLibrary.getProtocolManager().addPacketListener(new SkullExploitListener(this));
        // Chunk Load Listener
        Bukkit.getPluginManager().registerEvents(new ChunkPatcher(this), this);
        // Item Listener
        Bukkit.getPluginManager().registerEvents(new ItemPatcher(this), this);
    }

    public boolean isExploit(ItemStack stack) {
        try {
            if (stack == null) {
                return false;
            }
            if (stack.getType() == Material.SKULL || stack.getType() == Material.SKULL_ITEM) {
                // Check human
                if (stack.getDurability() == 3) {
                    NbtCompound tag = (NbtCompound) NbtFactory.fromItemTag(stack);
                    if (isExploit(tag)) {
                        return true;
                    }
                }
            }
        } catch (Exception e) {
            //nbt read error
        }
        return false;
    }

    @SuppressWarnings("rawtypes")
    public boolean isExploit(NbtCompound root) {
        // Item
        if (root.containsKey("SkullOwner")) {
            NbtCompound skullOwner = root.getCompound("SkullOwner");
            if (skullOwner.containsKey("Properties")) {
                NbtCompound properties = skullOwner.getCompound("Properties");
                if (properties.containsKey("textures")) {
                    NbtList<NbtBase> textures = properties.getList("textures");
                    for (NbtBase texture : textures.asCollection()) {
                        if (texture instanceof NbtCompound) {
                            // Check for value
                            if (((NbtCompound) texture).containsKey("Value")) {
                                if (((NbtCompound) texture).getString("Value").trim().length() > 0) {
                                    String decoded = new String(BaseEncoding.base64().decode(((NbtCompound) texture).getString("Value")));
                                    if (decoded.contains("textures") && decoded.contains("SKIN")) {
                                        if (decoded.contains("url")) {
                                            String Url = decoded.split("url")[1].replace("\"", "").replace(":", "").replace("{", "").replace("}", "");
                                            if (Url.trim().length() == 0) {
                                                root.remove("SkullOwner");
                                                return true;
                                            }
                                        } else {
                                            root.remove("SkullOwner");
                                            return true;
                                        }
                                    } else {
                                        root.remove("SkullOwner");
                                        return true;
                                    }
                                } else {
                                    root.remove("SkullOwner");
                                    return true;
                                }
                            } else {
                                root.remove("SkullOwner");
                                return true;
                            }
                        }
                    }
                }
            }
        }
        // Block
        if (root.containsKey("Owner"))
        {
            NbtCompound skullOwner = root.getCompound("Owner");
            if (skullOwner.containsKey("Properties")) {
                NbtCompound properties = skullOwner.getCompound("Properties");
                if (properties.containsKey("textures")) {
                    NbtList<NbtBase> textures = properties.getList("textures");
                    for (NbtBase texture : textures.asCollection()) {
                        if (texture instanceof NbtCompound) {
                            if (((NbtCompound) texture).containsKey("Value")) {
                                if (((NbtCompound) texture).getString("Value").trim().length() > 0) {
                                    String decoded = new String(BaseEncoding.base64().decode(((NbtCompound) texture).getString("Value")));
                                    if (decoded.contains("textures") && decoded.contains("SKIN")) {
                                        if (decoded.contains("url")) {
                                            String Url = decoded.split("url")[1].replace("\"", "").replace(":", "").replace("{", "").replace("}", "");
                                            if (Url.trim().length() == 0) {
                                                root.remove("Owner");
                                                return true;
                                            }
                                        } else {
                                            root.remove("Owner");
                                            return true;
                                        }
                                    } else {
                                        root.remove("Owner");
                                        return true;
                                    }
                                } else {
                                    root.remove("Owner");
                                    return true;
                                }
                            } else {
                                root.remove("Owner");
                                return true;
                            }
                        }
                    }
                }
            }
        }
   
        return false;
    }

    public void cleanChunk(Chunk chunk) {
        // Clean blocks
        List<Block> heads = new ArrayList<>();

        for (BlockState state : chunk.getTileEntities()) {
            // Check for skull
            if (state != null && (state.getType() == Material.SKULL || state.getType() == Material.SKULL_ITEM)) {
                // Check human
                heads.add(state.getBlock());
            }
        }

        for (Block head : heads) {
            if (mc10) {
                Skull meta = (Skull) head.getState();
                if (meta.hasOwner()) {
                    meta.setOwningPlayer(meta.getOwningPlayer());
                    meta.update();
                }
            } else {
                try {
                    //Dont skip loop if error
                    NbtCompound root = NbtFactory.readBlockState(head);
                    if (isExploit(root)) {
                        getLogger().warning("Removing exploit block, " + head.getLocation());
                        head.setType(Material.AIR);
                    }
                } catch (Exception e) {
                    // Failed to read chunk data, probably odd version and need to update protocol lib.
                }
            }
        }

        // Clean entities
        for (Entity e : Arrays.asList(chunk.getEntities())) {
            if (e instanceof Item) {
                Item item = (Item) e;
                if (isExploit(item.getItemStack())) {
                    item.remove();
                    getLogger().warning("Removing exploit item entity, " + item.getLocation());
                }
            }
        }
    }
}
