package us.myles.sep;

import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;

public class ItemPatcher implements Listener {

    private final SkullExploitPatch plugin;

    public ItemPatcher(SkullExploitPatch skullExploitPatch) {
        this.plugin = skullExploitPatch;
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = false)
    public void onInteract(PlayerInteractEvent e) {
        if (plugin.isExploit(e.getItem())) {
            e.setCancelled(true);
            removeExploit(e.getPlayer().getInventory());
            plugin.getLogger().warning("Removing exploit from inventory, " + e.getPlayer().getName());
        }
    }

    /**
     * @param inventory
     * @return If removed at least one item
     */
    private boolean removeExploit(Inventory inventory) {
        ItemStack[] contents = inventory.getContents();
        boolean removedOne = false;
        for (int i = 0; i < contents.length; i++) {
            ItemStack itemStack = contents[i];
            if (plugin.isExploit(itemStack)) {
                inventory.clear(i);
                removedOne = true;
            }
        }
        return removedOne;
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = false)
    public void onJoin(PlayerJoinEvent e) {
        if (removeExploit(e.getPlayer().getInventory())) {
            plugin.getLogger().warning("Removing exploit from inventory, " + e.getPlayer().getName());
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onItemDrop(PlayerDropItemEvent e) {
        if (plugin.isExploit(e.getItemDrop().getItemStack())) {
            e.setCancelled(true);
            removeExploit(e.getPlayer().getInventory());
            plugin.getLogger().warning("Removing exploit from inventory, " + e.getPlayer().getName());
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onItemDrop(InventoryClickEvent e) {
        if (e.getWhoClicked().getType() == EntityType.PLAYER) {
            if (plugin.isExploit(e.getCurrentItem())) {
                e.setCancelled(true);
                removeExploit(e.getInventory());
                plugin.getLogger().warning("Removing exploit from inventory, " + e.getWhoClicked().getName());
            }
        }
    }
}
